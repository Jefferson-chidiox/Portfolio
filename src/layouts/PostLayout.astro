---
import { type BlogSchema } from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";

export interface Props extends BlogSchema {}

const { title, description, pubDate, updatedDate, heroImage, badge, tags = [] } = Astro.props;
dayjs.extend(localizedFormat);
const displayDate = dayjs(pubDate).format("ll")
import { Image } from "astro:assets";
---
<!-- <script is:inline>
  // ‚òùÔ∏è This script prevents the FART effect.
  if (localStorage.getItem("theme") === null) {
    document.documentElement.setAttribute("data-theme", "light");
  } else {
    document.documentElement.setAttribute(
      "data-theme",
      localStorage.getItem("theme")
    );
  }
  // "theme" LocalStorage value is set by the package to remember user preference.
  // The value is checked and applied before rendering anything.
</script>
<script>
  import { themeChange } from 'theme-change';
  themeChange();
  // üëÜ you could import the CDN directly instead of these two lines

  document.addEventListener('DOMContentLoaded', function() {
    const selectThemeElement = document.querySelector('[data-choose-theme]');
    if (selectThemeElement) {
      selectThemeElement.addEventListener('change', function(event) {
        const target = event.target as HTMLSelectElement;
        const theme = target.value;
        localStorage.setItem('theme', theme);
        document.documentElement.setAttribute('data-theme', theme);
      });
    }
  });
</script> -->

<BaseLayout title={title} description={description} image={heroImage}, ogType="article">
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      {heroImage && <Image width={750} height={422} format="webp" src={heroImage} alt={title} class="w-full mb-6" />}
      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      {pubDate && <time>{displayDate}</time>}
      <br />
      {badge && <div class="badge badge-secondary my-1">{badge}</div>}
      {
        tags &&
          tags.map((tag) => (
            <a href={`/blog/tag/${tag}`} class="badge badge-outline ml-2 no-underline">
              {tag}
            </a>
          ))
      }
      {
        updatedDate && (
          <div>
            {" "}
            Last updated on <time>{updatedDate}</time>{" "}
          </div>
        )
      }
      <div class="divider my-2"></div>
      <slot />
    </article>
  </main>
</BaseLayout>
